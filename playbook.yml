---
- name: Install Google Chrome on Ubuntu
  hosts: all
  become: true

  tasks:
    - name: Add Google Chrome apt key
      apt_key:
        url: https://dl.google.com/linux/linux_signing_key.pub
        state: present

    - name: Add Google Chrome apt repository
      apt_repository:
        repo: deb [arch=amd64] https://dl.google.com/linux/chrome/deb/ stable main
        state: present
        filename: google-chrome

    - name: Install Google Chrome
      apt:
        name: google-chrome-stable
        state: present

- name: Install APT based packages on Ubuntu
  hosts: all
  become: true

  tasks:
    - name: Install OpenSSH-server
      apt:
        name: openssh-server
        state: present

    - name: Install Wake-on-LAN
      apt:
        name: wakeonlan
        state: present

    - name: Install NFS-common
      apt:
        name: nfs-common
        state: present

    - name: Install Zsh
      apt:
        name: zsh
        state: present

    - name: Install curl
      apt:
        name: curl
        state: present

    - name: Install Zsh
      apt:
        name: wget
        state: present

    - name: Install git
      apt:
        name: git
        state: present

    - name: Install fonts-powerline
      apt:
        name: fonts-powerline
        state: present

    - name: Install Python3-pip
      apt:
        name: python3-pip
        state: present

    - name: Install ffmpeg
      apt:
        name: ffmpeg
        state: present

    - name: Install unzip
      apt:
        name: unzip
        state: present

- name: Install Docker on Ubuntu
  hosts: all
  become: true
  vars_files:
    - external_vars.yaml

  tasks:
    - name: Install prerequisite packages
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
        state: present

    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker repository
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable
        state: present
        filename: docker-ce

    - name: Install Docker
      apt:
        name: docker-ce
        state: present

    - name: Install Docker Compose
      apt:
        name: docker-compose
        state: present

    - name: Create a group for Docker
      group:
        name: docker
        state: present

    - name: Adding existing user to group docker
      user:
        name: "{{ user_name }}"
        groups: docker
        append: yes

- name: Install Sublime Text and PyCharm, Slack on Ubuntu
  hosts: localhost
  become: true

  tasks:
    - name: Add Sublime Text GPG key
      apt_key:
        url: https://download.sublimetext.com/sublimehq-pub.gpg
        state: present

    - name: Add Sublime Text APT repository
      apt_repository:
        repo: "deb https://download.sublimetext.com/ apt/stable/"
        state: present

    - name: Update apt package cache
      apt:
        update_cache: yes

    - name: Install Sublime Text
      apt:
        name: sublime-text
        state: present

    - name: Install PyCharm Community Edition
      snap:
        name: pycharm-community
        classic: yes
        state: present

    - name: Install Slack
      snap:
        name: slack
        state: present

- name: Install AWS CLI
  hosts: localhost
  become: true

  tasks:
    - name: Download AWS CLI package
      ansible.builtin.get_url:
        url: https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip
        dest: /tmp/awscliv2.zip

    - name: Unzip the package
      unarchive: src=/tmp/awscliv2.zip dest=/tmp copy=no creates=/tmp/aws

    - name: Check if aws exists
      stat:
        path: /usr/bin/aws
      register: aws_file

    - name: Install awscli package.
      shell: /tmp/aws/install -i /usr/local/aws-cli -b /usr/bin/aws --update
      become: true
      when: not aws_file.stat.exists

- name: Install Visual Studio Code on Ubuntu
  hosts: localhost
  become: true

  tasks:
    - name: Install VS Code GPG key
      apt_key:
        url: https://packages.microsoft.com/keys/microsoft.asc
        state: present

    - name: Add VS Code APT repository
      apt_repository:
        repo: deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main
        state: present

    - name: Update APT cache
      apt:
        update_cache: yes

    - name: Install Visual Studio Code
      apt:
        name: code
        state: present

- name: Install Terraform and packer
  hosts: localhost
  become: true

  tasks:
    - name: Install Hashicorp GPG Key
      apt_key:
        url: https://apt.releases.hashicorp.com/gpg
        state: present

    - name: Add HashiCorp repository
      apt_repository:
        repo: deb [arch=amd64] https://apt.releases.hashicorp.com {{ansible_lsb.codename}} main
        state: present

    - name: Update APT cache
      apt:
        update_cache: yes

    - name: Install Terraform
      apt:
        name: terraform
        state: present

- name: Install KVM and related packages
  hosts: localhost
  become: true
  vars_files:
    - external_vars.yaml

  tasks:
    - name: Install multiple kvm related packages
      apt:
        pkg:
          - qemu-kvm
          - libvirt-daemon-system
          - virtinst
          - libvirt-clients
          - bridge-utils
          - virt-manager
        state: present

    - name: Install and start the service
      ansible.builtin.service:
        name: libvirtd
        enabled: true
        state: started

    - name: adding existing user to group kvm
      user:
        name: "{{user_name}}"
        groups: kvm
        append: yes

    - name: adding existing user to group libvirt
      user:
        name: "{{user_name}}"
        groups: libvirt
        append: yes

- name: Install Terragrunt
  hosts: localhost
  become: true
  vars_files:
    - external_vars.yaml

  tasks:
    - name: Download and install Terragrunt
      ansible.builtin.get_url:
        url: https://github.com/gruntwork-io/terragrunt/releases/download/{{tg_version}}/terragrunt_linux_amd64
        dest: /usr/local/bin/terragrunt

    - name: update foo.txt owner group mode
      file:
        path: /usr/local/bin/terragrunt
        owner: "{{user_name}}"
        group: "{{user_name}}"
        mode: "0755"

- name: Install kubectl
  hosts: localhost
  become: true
  vars_files:
    - external_vars.yaml

  tasks:
    - name: Get latest kubectl version
      uri:
        url: https://dl.k8s.io/release/stable.txt
        return_content: yes
      register: version

    - name: Download the latest kubectl release
      ansible.builtin.get_url:
        url: https://dl.k8s.io/release/{{ version.content }}/bin/linux/amd64/kubectl
        dest: /tmp/
      register: kubectl

    - name: Delete existing checksum file if exists
      file:
        path: "/tmp/kubectl.sha256"
        state: absent

    - name: Download the kubectl checksum file
      ansible.builtin.get_url:
        url: https://dl.k8s.io/{{ version.content }}/bin/linux/amd64/kubectl.sha256
        dest: /tmp/

    - name: Validate the kubectl binary against the checksum file
      shell: echo "$(cat /tmp/kubectl.sha256)  /tmp/kubectl" | sha256sum --check
      register: result

    - name: Assert that the kubectl binary is OK
      vars:
        expected: "/tmp/kubectl: OK"
      assert:
        that:
          - result.stdout == expected
        fail_msg: "{{ result.stdout }}"
        success_msg: "{{ result.stdout }}"

    - name: Check if kubectl exists
      stat:
        path: /usr/local/bin/kubectl
      register: kubectl_file

    - name: Move kubectl and change permissions
      file:
        src: "/tmp/kubectl"
        dest: /usr/local/bin/kubectl
        state: hard
        owner: root
        group: root
        mode: "+x"
      when: not kubectl_file.stat.exists

    - name: Check if kubectl is installed
      shell: kubectl version --client
      register: client
      failed_when: client.rc > 1

- name: Install Zoom
  hosts: localhost
  become: true
  vars_files:
    - external_vars.yaml

  tasks:
    - name: Install zoom deb
      apt:
        deb: "{{zoom_link}}"
        state: present

- name: Install Oh-my-zsh
  hosts: localhost
  become: false
  vars_files:
    - external_vars.yaml
  vars_prompt:
    - name: "default shell to zsh"
      prompt: "Do you want to change your default shell to zsh? [Y/n]"
      private: no

  tasks:
    - name: Check if .zshrc exists
      stat:
        path: /home/{{user_name}}/.zshrc
      register: zshrc_file

    - name: Download and install oh-my-zsh
      ansible.builtin.shell: sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
      when: not zshrc_file.stat.exists

    - name: Check if .zshrc exists
      stat:
        path: /home/{{user_name}}/.zshrc
      register: zshrc_file

    - name: Replace old the theme robbyrussell with agnoster
      ansible.builtin.replace:
        path: /home/{{user_name}}/.zshrc
        regexp: "robbyrussell"
        replace: "agnoster"
      when: zshrc_file.stat.exists

    - name: Check if zsh-autosuggestions exists
      stat:
        path: /home/{{user_name}}/.oh-my-zsh/custom/plugins/zsh-autosuggestions
      register: autosuggestions_dir

    - name: Add zsh-auto-suggestions
      ansible.builtin.shell: git clone https://github.com/zsh-users/zsh-autosuggestions.git /home/{{user_name}}/.oh-my-zsh/custom/plugins/zsh-autosuggestions
      when: not autosuggestions_dir.stat.exists

    - name: Check if zsh-autosuggestions exists
      stat:
        path: /home/{{user_name}}/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting
      register: syntax_highlighting_dir

    - name: Add zsh-syntax-highlighting
      ansible.builtin.shell: git clone https://github.com/zsh-users/zsh-syntax-highlighting.git /home/{{user_name}}/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting
      when: not syntax_highlighting_dir.stat.exists

    - name: Add plugins in zshrc_file
      ansible.builtin.replace:
        path: /home/{{user_name}}/.zshrc
        regexp: '\(git\)'
        replace: "(git zsh-autosuggestions zsh-syntax-highlighting)"
      when: zshrc_file.stat.exists

- name: Cleanup
  hosts: localhost
  become: true

  tasks:
    - name: Remove useless packages from the cache
      ansible.builtin.apt:
        autoclean: yes

    - name: Remove dependencies that are no longer required
      ansible.builtin.apt:
        autoremove: yes
