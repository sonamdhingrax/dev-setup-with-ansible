- name: Install APT based packages on Ubuntu
  hosts: all
  become: true

  tasks:
    - name: Install OpenSSH-server
      apt:
        name: openssh-server
        state: present

    - name: Install Wake-on-LAN
      apt:
        name: wakeonlan
        state: present

    - name: Install NFS-common
      apt:
        name: nfs-common
        state: present

    - name: Install Zsh
      apt:
        name: zsh
        state: present

    - name: Install curl
      apt:
        name: curl
        state: present

    - name: Install wget
      apt:
        name: wget
        state: present

    - name: Install git
      apt:
        name: git
        state: present

    - name: Install fonts-powerline
      apt:
        name: fonts-powerline
        state: present

    - name: Install Python3-pip
      apt:
        name: python3-pip
        state: present

    - name: Install unzip
      apt:
        name: unzip
        state: present

- name: Install AWS CLI
  hosts: localhost
  become: true

  tasks:
    - name: Download AWS CLI package
      ansible.builtin.get_url:
        url: https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip
        dest: /tmp/awscliv2.zip

    - name: Unzip the package
      unarchive: src=/tmp/awscliv2.zip dest=/tmp copy=no creates=/tmp/aws

    - name: Check if aws exists
      stat:
        path: /usr/local/bin/aws
      register: aws_file

    - name: Install awscli package.
      shell: /tmp/aws/install -i /usr/local/aws-cli -b /usr/local/bin/ --update
      become: true
      when: not aws_file.stat.exists

- name: Install Terraform
  hosts: localhost
  become: true

  tasks:
    - name: Install Hashicorp GPG Key
      apt_key:
        url: https://apt.releases.hashicorp.com/gpg
        state: present

    - name: Add HashiCorp repository
      apt_repository:
        repo: deb [arch=amd64] https://apt.releases.hashicorp.com {{ansible_lsb.codename}} main
        state: present

    - name: Update APT cache
      apt:
        update_cache: yes

    - name: Install Terraform
      apt:
        name: terraform
        state: present

# - name: Install kubectl
#   hosts: localhost
#   become: true
#   vars_files:
#     - external_vars.yaml

#   tasks:
#     - name: Get latest kubectl version
#       uri:
#         url: https://dl.k8s.io/release/stable.txt
#         return_content: yes
#       register: version

#     - name: Download the latest kubectl release
#       ansible.builtin.get_url:
#         url: https://dl.k8s.io/release/{{ version.content }}/bin/linux/amd64/kubectl
#         dest: /tmp/
#       register: kubectl

#     - name: Delete existing checksum file if exists
#       file:
#         path: "/tmp/kubectl.sha256"
#         state: absent

#     - name: Download the kubectl checksum file
#       ansible.builtin.get_url:
#         url: https://dl.k8s.io/{{ version.content }}/bin/linux/amd64/kubectl.sha256
#         dest: /tmp/

#     - name: Validate the kubectl binary against the checksum file
#       shell: echo "$(cat /tmp/kubectl.sha256)  /tmp/kubectl" | sha256sum --check
#       register: result

#     - name: Assert that the kubectl binary is OK
#       vars:
#         expected: "/tmp/kubectl: OK"
#       assert:
#         that:
#           - result.stdout == expected
#         fail_msg: "{{ result.stdout }}"
#         success_msg: "{{ result.stdout }}"

#     - name: Check if kubectl exists
#       stat:
#         path: /usr/local/bin/kubectl
#       register: kubectl_file

#     - name: Move kubectl and change permissions
#       file:
#         src: "/tmp/kubectl"
#         dest: /usr/local/bin/kubectl
#         state: hard
#         owner: root
#         group: root
#         mode: "+x"
#       when: not kubectl_file.stat.exists

#     - name: Check if kubectl is installed
#       shell: kubectl version --client
#       register: client
#       failed_when: client.rc > 1

- name: Install Oh-my-zsh
  hosts: localhost
  become: false
  vars_files:
    - external_vars.yaml
  vars_prompt:
    - name: "default shell to zsh"
      prompt: "Do you want to change your default shell to zsh? [Y/n]"
      private: no

  tasks:
    - name: Check if .zshrc exists
      stat:
        path: /home/{{user_name}}/.zshrc
      register: zshrc_file

    - name: Download and install oh-my-zsh
      ansible.builtin.shell: sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
      when: not zshrc_file.stat.exists

    - name: Check if .zshrc exists
      stat:
        path: /home/{{user_name}}/.zshrc
      register: zshrc_file

    - name: Replace old the theme robbyrussell with agnoster
      ansible.builtin.replace:
        path: /home/{{user_name}}/.zshrc
        regexp: "robbyrussell"
        replace: "agnoster"
      when: zshrc_file.stat.exists

    - name: Check if zsh-autosuggestions exists
      stat:
        path: /home/{{user_name}}/.oh-my-zsh/custom/plugins/zsh-autosuggestions
      register: autosuggestions_dir

    - name: Add zsh-auto-suggestions
      ansible.builtin.shell: git clone https://github.com/zsh-users/zsh-autosuggestions.git /home/{{user_name}}/.oh-my-zsh/custom/plugins/zsh-autosuggestions
      when: not autosuggestions_dir.stat.exists

    - name: Check if zsh-autosuggestions exists
      stat:
        path: /home/{{user_name}}/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting
      register: syntax_highlighting_dir

    - name: Add zsh-syntax-highlighting
      ansible.builtin.shell: git clone https://github.com/zsh-users/zsh-syntax-highlighting.git /home/{{user_name}}/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting
      when: not syntax_highlighting_dir.stat.exists

    - name: Add plugins in zshrc_file
      ansible.builtin.replace:
        path: /home/{{user_name}}/.zshrc
        regexp: '\(git\)'
        replace: "(git zsh-autosuggestions zsh-syntax-highlighting)"
      when: zshrc_file.stat.exists

- name: Install Golang
  hosts: all
  become: yes # Use sudo
  vars:
    golang_version: "1.22.0" # Specify the Go version you want to install
    golang_download_url: "https://golang.org/dl/go{{ golang_version }}.linux-amd64.tar.gz"
    golang_install_dir: "/usr/local"
    goroot_dir: "{{ golang_install_dir }}/go"

  tasks:
    - name: Download Golang tarball
      ansible.builtin.get_url:
        url: "{{ golang_download_url }}"
        dest: "/tmp/go{{ golang_version }}.linux-amd64.tar.gz"
        timeout: 60
        validate_certs: yes

    - name: Extract Golang tarball
      ansible.builtin.unarchive:
        src: "/tmp/go{{ golang_version }}.linux-amd64.tar.gz"
        dest: "{{ golang_install_dir }}"
        remote_src: yes
        creates: "{{ goroot_dir }}"

    - name: Update zshrc for Go paths
      ansible.builtin.lineinfile:
        path: "/home/{{ ansible_user }}/.zshrc"
        line: "{{ item }}"
        create: yes
      loop:
        - "export GOROOT={{ goroot_dir }}"
        - "export PATH=$PATH:{{ goroot_dir }}/bin"

    - name: Apply .zshrc changes
      ansible.builtin.shell: "source /home/{{ ansible_user }}/.zshrc"
      args:
        executable: /bin/zsh
      become: no
      become_user: "{{ ansible_user }}"

- name: Install Docker on Ubuntu
  hosts: all
  become: true
  vars_files:
    - external_vars.yaml

  tasks:
    - name: Install prerequisite packages
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
        state: present

    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker repository
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable
        state: present
        filename: docker-ce

    - name: Install Docker
      apt:
        name: docker-ce
        state: present

    - name: Install Docker Compose
      apt:
        name: docker-compose
        state: present

    - name: Create a group for Docker
      group:
        name: docker
        state: present

    - name: Adding existing user to group docker
      user:
        name: "{{ user_name }}"
        groups: docker
        append: yes
